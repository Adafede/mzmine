name: Test Build

on:
  push:
    branches: [ master ]
    tags: [ 'v[0-9]+.*' ]
  pull_request:
    branches: [ master ]
    
jobs:
  gradle_build:
    name: test and build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: 17.0.2
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Execute Gradle build
      run: ./gradlew --stacktrace --info
      
    - name: Zip portable windows
      if: matrix.os == 'windows-latest'
      uses: papeloto/action-zip@v1
      with:
        files: build/jpackage/MZmine/
        dest: build/jpackage/MZmine_windows_portable.zip
      
    - name: Upload windows builds
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: MZmine_windows_msi_installer
        path: build/jpackage/*.msi
        retention-days: 7  # store for 7 days
      
    - name: Upload windows portable builds
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: MZmine_windows_portable
        path: build/jpackage/MZmine_windows_portable.zip
        retention-days: 7  # store for 7 days
        
    - name: Upload builds ubuntu deb
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: MZmine_linux_deb_package
        path: build/jpackage/*.deb
        retention-days: 7  # store for 7 days
        
    - name: Upload builds ubuntu rpm
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: MZmine_linux_rpm_package
        path: build/jpackage/*.rpm
        retention-days: 7  # store for 7 days
        
    - name: Upload builds macos
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v2
      with:
        name: MZmine_macos_dmg_installer
        path: build/jpackage/*.dmg
        retention-days: 7  # store for 7 days

    
  # release dev version
  release_dev:
    name: Release dev version
    needs: gradle_build
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2 # download all artifacts
        with:
          path: build/
        
      - name: Update Automatic Release Ubuntu
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "Ubuntu-latest"
          prerelease: true
          title: "Ubuntu Development Build"
          files: build/*.deb

      - name: Update Automatic Release Window
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "Windows-latest"
          prerelease: true
          title: "Windows Development Build"
          files: |
            build/*windows*
            build/*.msi


      - name: Update Automatic Release MacOS
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "MacOS-latest"
          prerelease: true
          title: "MacOS Development Build"
          files: build/*.dmg
        
        
  # bump up patch if dev release finished
  
      
  # release dev version
  release_stable:
    name: Release new MZmine version
    needs: release_dev
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2 # download all artifacts
        with:
          path: build/
        
      - name: Create stable release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN}}"
          prerelease: true
          title: "Release build"
          files: build/*

