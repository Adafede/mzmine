name: PR Test Build

on:
  pull_request:
    branches: [ "master" ]

env:
  TEST_USER: "Ic5OXgAAAJwAAAABAAAAEAAAAIBsaWNlbnNlU2lnbmF0dXJlVohMd37EeO/qfpUE7X+58mOWQlIC71H3IycHAVqw2vx+iWt32HYydQh9vNaHs1fndn1pEFQGyRhNWDv59+4lF7/HCaKykejdgU2KrR2MEC2wjgmGkPiSi6t21/UenjcJjkkRIad3CLvIK8gSEqx+QapshJ4363rOGIu4bfTGEj4AAAAeAAAAAgAAAAgAAAAKbmlja25hbWV0ZXN0cnVubmVyAAAAHgAAAAsAAAAOcHJvX3VudGlsX2RhdGUAAAgJRBvLAAAAABQAAAACAAAACAAAAABzZXJ2aWNlcwAAACIAAAACAAAADwAAAAdzaWduYXR1cmVEaWdlc3RTSEEtNTEyAAAAJAAAAAsAAAAUdHJpYWxfcHJvX3VudGlsX2RhdGUAAAGPI0nzAA=="
  
jobs:
  gradle_build: 
    environment: MZMINE
    env:
      TESTRUNNER_USER: "${{ secrets.TESTRUNNER }}"
      TESTRUNNER_ACTION: "${{ secrets.TESTRUNNER_USER }}"
      TRDIRECT: "Ic5OXgAAAJwAAAABAAAAEAAAAIBsaWNlbnNlU2lnbmF0dXJlVohMd37EeO/qfpUE7X+58mOWQlIC71H3IycHAVqw2vx+iWt32HYydQh9vNaHs1fndn1pEFQGyRhNWDv59+4lF7/HCaKykejdgU2KrR2MEC2wjgmGkPiSi6t21/UenjcJjkkRIad3CLvIK8gSEqx+QapshJ4363rOGIu4bfTGEj4AAAAeAAAAAgAAAAgAAAAKbmlja25hbWV0ZXN0cnVubmVyAAAAHgAAAAsAAAAOcHJvX3VudGlsX2RhdGUAAAgJRBvLAAAAABQAAAACAAAACAAAAABzZXJ2aWNlcwAAACIAAAACAAAADwAAAAdzaWduYXR1cmVEaWdlc3RTSEEtNTEyAAAAJAAAAAsAAAAUdHJpYWxfcHJvX3VudGlsX2RhdGUAAAGPI0nzAA=="
      TRINDIRECT: "${TEST_USER}"
      TESTRUNNER_VAR: "${{ vars.TESTRUNNER_VAR }}"
      TEST_SEC: "${{ secrets.TEST_SEC }}"
    name: test and build
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        # os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:    
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21.0.2'
#          cache: 'gradle'  # now done with gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Set user to ENV
        run: |
          echo "TESTRUNNER_USER=$TEST_USER" >> "$GITHUB_ENV"


      - name: Create TESTRUNNER user file
        env:
          ENVUSER_BASE64: ${{ secrets.ENVUSER_BASE64 }}
          USER_BASE64: ${{ secrets.USER_BASE64 }}
        run: |
          mkdir -p $HOME/.mzmine/users/
          echo $HOME/.mzmine/users/
          echo "$TEST_USER" > $HOME/.mzmine/users/testrunner.mzuserstr
          echo $ENVUSER_BASE64 | base64 --decode > $HOME/.mzmine/users/envuser.mzuserstr
          echo $USER_BASE64 | base64 --decode > $HOME/.mzmine/users/user_base64.mzuserstr
   

#      in PR, without signing
#      in push to master use signed version for macOS
      - name: Execute Gradle build (unsigned)
        env:
          TESTRUNNER_USER: "${{ secrets.TESTRUNNER }}"
          TESTRUNNER_ACTION: "${{ secrets.TESTRUNNER_USER }}"
          TRDIRECT: "Ic5OXgAAAJwAAAABAAAAEAAAAIBsaWNlbnNlU2lnbmF0dXJlVohMd37EeO/qfpUE7X+58mOWQlIC71H3IycHAVqw2vx+iWt32HYydQh9vNaHs1fndn1pEFQGyRhNWDv59+4lF7/HCaKykejdgU2KrR2MEC2wjgmGkPiSi6t21/UenjcJjkkRIad3CLvIK8gSEqx+QapshJ4363rOGIu4bfTGEj4AAAAeAAAAAgAAAAgAAAAKbmlja25hbWV0ZXN0cnVubmVyAAAAHgAAAAsAAAAOcHJvX3VudGlsX2RhdGUAAAgJRBvLAAAAABQAAAACAAAACAAAAABzZXJ2aWNlcwAAACIAAAACAAAADwAAAAdzaWduYXR1cmVEaWdlc3RTSEEtNTEyAAAAJAAAAAsAAAAUdHJpYWxfcHJvX3VudGlsX2RhdGUAAAGPI0nzAA=="
          TRINDIRECT: "${TEST_USER}"
          TESTRUNNER_VAR: "${{ vars.TESTRUNNER_VAR }}"
          TEST_SEC: "${{ secrets.TEST_SEC }}"
        run: | 
          export EXP_TEST="test export"
          export EXP_SEC=${{ secrets.TESTRUNNER }}
          TRINLINE=testval 
          TRSECINLINE=${{ secrets.TESTRUNNER }} 
          TRACSEC="${{ secrets.TESTRUNNER_USER }}" 
          ./gradlew -p mzmine-community --stacktrace --info --warning-mode all
          

      # ZIP PORTABLE VERSIONS
      - name: Zip portable windows
        if: runner.os == 'Windows'
        uses: papeloto/action-zip@v1
        with:
          files: mzmine-community/build/jpackage/MZmine/
          dest: mzmine-community/build/jpackage/MZmine_Windows_portable.zip
      - name: Zip portable linux
        if: runner.os == 'Linux'
        uses: papeloto/action-zip@v1
        with:
          files: mzmine-community/build/jpackage/MZmine/
          dest: mzmine-community/build/jpackage/MZmine_Linux_portable.zip

      # UPLOAD ALL FILES
      - name: Upload windows builds
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_windows_msi_installer
          path: mzmine-community/build/jpackage/*.msi
          retention-days: 7  # store for 7 days
      - name: Upload windows portable builds
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_windows_portable
          path: mzmine-community/build/jpackage/MZmine_Windows_portable.zip
          retention-days: 7  # store for 7 days

      - name: Upload builds ubuntu deb
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_deb_package
          path: mzmine-community/build/jpackage/*.deb
          retention-days: 7  # store for 7 days
      - name: Upload builds ubuntu rpm
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_rpm_package
          path: mzmine-community/build/jpackage/*.rpm
          retention-days: 7  # store for 7 days
      - name: Upload linux portable builds
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_portable
          path: mzmine-community/build/jpackage/MZmine_Linux_portable.zip
          retention-days: 7  # store for 7 days



      # for macOS:
      # 1. upload the dmg installer
      # 2. remove the dmg isntaller from path
      # 3. zip and upload the jpackage directory
      # This is needed because zipping of the /jpackage/MZmine.app portable version zips the content
      # of the folder not the folder itself
      - name: Setup node for macOS packaging
        if: runner.os == 'macOS'
        uses: actions/setup-node@v3  # To install appdmg

      - name: Pack macOS .app to .dmg
        if: runner.os == 'macOS'
        run: |
          npm install --python=python3.11 -g appdmg
          appdmg mzmine-community/gradle/appdmg.json mzmine-community/build/jpackage/MZmine_macOS_installer.dmg

      - name: Upload macOS installer
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_macOS_installer
          path: mzmine-community/build/jpackage/MZmine_macOS_installer.dmg
          retention-days: 7  # store for 7 days

#      - name: Remove dmg File and Make .app executable
#        if: runner.os == 'macOS'
#        run: |
#          find ./build/jpackage/ -name '*.dmg' -delete
#          chmod a+x build/jpackage/MZmine.app/Contents/MacOS/MZmine
#      - name: Zip portable macos
#        if: runner.os == 'macOS'
#        uses: papeloto/action-zip@v1
#        with:
#          files: build/jpackage/
#          dest: build/jpackage/MZmine_macOS_portable.zip
      - name: Upload macOS portable builds
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_macos_portable
          path: mzmine-community/build/jpackage/MZmine_macOS_portable.zip
          retention-days: 7  # store for 7 days
